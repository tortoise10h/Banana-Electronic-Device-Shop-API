// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201218031718_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b979036b-d165-4bea-b6b6-16b22a3f54dd",
                            ConcurrencyStamp = "d0b7337e-45b8-4aad-9bfd-188d3d2a9c24",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "5ce20f05-c625-43fc-ae25-a7514e9520db",
                            ConcurrencyStamp = "d32c06e8-cd9d-4835-a679-d93713f7f3e2",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "308da0db-e863-4814-8930-de3540e5406d",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            RoleId = "5ce20f05-c625-43fc-ae25-a7514e9520db"
                        },
                        new
                        {
                            UserId = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            RoleId = "5ce20f05-c625-43fc-ae25-a7514e9520db"
                        },
                        new
                        {
                            UserId = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            RoleId = "5ce20f05-c625-43fc-ae25-a7514e9520db"
                        },
                        new
                        {
                            UserId = "ce4b2f5c-1fb9-4fe1-945c-20eca474ce16",
                            RoleId = "5ce20f05-c625-43fc-ae25-a7514e9520db"
                        },
                        new
                        {
                            UserId = "fd9a7449-e604-48c1-a638-c564e17c1bc0",
                            RoleId = "5ce20f05-c625-43fc-ae25-a7514e9520db"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "308da0db-e863-4814-8930-de3540e5406d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "304d46c4-4ba8-4a6d-95fa-db4cbb000af8",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tortoise10h@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huy",
                            LastName = "Nguyen Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "TORTOISE10H@GMAIL.COM",
                            NormalizedUserName = "TORTOISE10H@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5tz+pcLrOJBJ2Zc7UV4R1b+paGFLWfBT6TdXQCdj+WR7yWjRfwmJFGeKq1/Bd7kg==",
                            PhoneNumber = "0397097276",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tortoise10h@gmail.com"
                        },
                        new
                        {
                            Id = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae11c82d-366a-4d3b-bf0e-2460190cdddc",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhminion2015@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Minh",
                            LastName = "Luu Bao",
                            LockoutEnabled = false,
                            NormalizedEmail = "MINHMINION2015@GMAIL.COM",
                            NormalizedUserName = "MINHMINION2015@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDHue7/WLxjL7v0SntCKRPzKNPtMg0LFY1yIT/LWwQJbI9KjyjbtEm2767YPY7s1Q==",
                            PhoneNumber = "0901234576",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "minhminion2015@gmail.com"
                        },
                        new
                        {
                            Id = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ee4cf0-4872-4b6a-b886-ca444a566b6a",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nahntvt@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Khoa",
                            LastName = "Nguyen Anh Khoa",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAHNTVT@GMAIL.COM",
                            NormalizedUserName = "NAHNTVT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcLfJYB1I3n6cPSn+BZQtq/4NWPKXJGUHzTmnYYSzTWyPKKSAi1rrTjihEa/DjMFA==",
                            PhoneNumber = "0901234581",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nahntvt@gmail.com"
                        },
                        new
                        {
                            Id = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7485ac18-faeb-4f91-a509-45a6b4532513",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoailinhkt2015@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Linh",
                            LastName = "Luong Tu",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOAILINHKT2015@GMAIL.COM",
                            NormalizedUserName = "HOAILINHKT2015@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDHbth+JmPJdSTml+J2h/aUzVM+wtYasl8hKH2TMv/zPoxBY+/FzPrTEjyh7Wv3lbQ==",
                            PhoneNumber = "0901234586",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoailinhkt2015@gmail.com"
                        },
                        new
                        {
                            Id = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "099b91c5-bc5a-4ab3-9d4c-2e1b3654426f",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ngtanhu99@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huy",
                            LastName = "Nguyen Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGTANHU99@GMAIL.COM",
                            NormalizedUserName = "NGTANHU99@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEEd2DdwxqBV+9PTBSuRSSIX7fVnPJmjdfF8XHhmbA5ulbR4ukeb05IngPV/rgS++Q==",
                            PhoneNumber = "0764928878",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ngtanhu99@gmail.com"
                        },
                        new
                        {
                            Id = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7679833a-c819-40dd-b57b-6a8e4888879e",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luubaominh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Minh",
                            LastName = "Luu Bao",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUUBAOMINH@GMAIL.COM",
                            NormalizedUserName = "LUUBAOMINH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECv5+0gFpv5WzRE2Ay/g+hf3X7BmUEg8rpDrFHETOuDrLKBz9vKXuXhe1B58TjSZ/w==",
                            PhoneNumber = "0901234564",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "luubaominh@gmail.com"
                        },
                        new
                        {
                            Id = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "517521c5-a644-4952-89c5-713fc4c87ea7",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "s2nak@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Khoa",
                            LastName = "Nguyen Anh",
                            LockoutEnabled = false,
                            NormalizedEmail = "S2NAK@GMAIL.COM",
                            NormalizedUserName = "S2NAK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMjWPvmacktYZO7T6yvO4mbekzPTXr9EX3OMB2OZ9/ldEl3WFJlwyiI6qTtyI3eUjA==",
                            PhoneNumber = "0901234572",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "s2nak@gmail.com"
                        },
                        new
                        {
                            Id = "ce4b2f5c-1fb9-4fe1-945c-20eca474ce16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28feea48-9d96-49bc-a5b8-046a20f979d1",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luongtulinh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Linh",
                            LastName = "Luong Tu",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUONGTULINH@GMAIL.COM",
                            NormalizedUserName = "LUONGTULINH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAAjiGQ6C/F0d3ZZD7QYY2cYAMLX6Od1UY1HLtic9GorstHV1vdCZnWgVkdc86gWRA==",
                            PhoneNumber = "0901234561",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "luongtulinh@gmail.com"
                        },
                        new
                        {
                            Id = "fd9a7449-e604-48c1-a638-c564e17c1bc0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dbb521d-e84c-4695-9a6f-fcf2fdd36a12",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPl1ocXR5dUYvh8VOYVMRcv9WImkj7JVIqS9Ze3rOBzTn36mClt8thU0u86gjGr9g==",
                            PhoneNumber = "0901234578",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("api.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsDeliveryNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GoodsDeliveryNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsDeliveryDetails");
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("GoodsDeliveryNotes");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsReceivingNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UniPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceivingNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReceivingDetails");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GoodsReceivingNotes");
                });

            modelBuilder.Entity("api.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryDetail", b =>
                {
                    b.HasOne("api.Entities.GoodsDeliveryNote", "GoodsDeliveryNote")
                        .WithMany("GoodsDeliveryDetails")
                        .HasForeignKey("GoodsDeliveryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("GoodsDeliveryDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryNote", b =>
                {
                    b.HasOne("api.Entities.Order", "Order")
                        .WithMany("GoodsDeliveryNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.HasOne("api.Entities.GoodsReceivingNote", "GoodsReceivingNote")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("GoodsReceivingNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Order", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("api.Entities.OrderDetail", b =>
                {
                    b.HasOne("api.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.HasOne("api.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
